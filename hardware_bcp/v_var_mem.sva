module v_var_mem(clock, reset, data_write, mem_request, d_in, address, d_out,mem_work);

	parameter data_width  = 8;         //Data Size
	parameter mem_size = 8;      //Memory Size
	parameter address_size = 2;         //Address Size

	input wire clock;
	input wire reset;
	input wire mem_request;
	input wire data_write;	
	input wire [data_width-1:0] d_in;
	input wire [address_size-1:0] address;
	input wire [data_width-1:0] d_out;
	input wire mem_work;
	


	parameter mem_dt_index = $clog2(data_width);
	reg [mem_dt_index-1:0] index;
	reg data_o;


	integer i;

	always @(*)
	begin
		for (i = 0; i < data_width; i = i+1)
		if (i == index)
			data_o  <=	d_out[i]; 
	end


jasper_model_mem #(5,1,1,0,0) mem_model (
	.clk(clock),
	.rstN(!reset),
	.datain(d_in[index]), 
	.datain_reg(),
	.addr_in(address),
	.addr_out(address),
	.weN(~mem_request),
	.pkt_vld(1'b1),
	.polarity(polarity),
	.dataout(data_o), //data_o is rdata[index]
	.dataout_reg()

);
  
endmodule
	
bind  var_mem
  v_var_mem i_var_mem
  ( .clock(clock), 
	.reset(reset), 
	.mem_request(mem_request),
	.data_write(data_write),
	.d_in(d_in),
	.address(address),
	.d_out(d_out),
	.mem_work(mem_work));